<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.MemberDAO">
	<!-- 로그인 -->
	<select id="signIn" parameterType="memberVO" resultType="memberVO">
		select 
		bank_id userid, 
		phone_num phonenum, 
		email, 
		zip_code zipcode, 
		address, 
		address_detail addressDetail, 
		rrn, 
		customer_type customertype
		, available_balance availablebalance
		
		from test_customer
		where bank_id=#{userId} and password=#{password}
	</select>
	
	<!-- 회원가입 -->
	<insert id="signUp" parameterType="memberVO">
		insert into test_customer 
		values(test_customer_seq.nextval, 
		#{userId}, 
		#{password}, 
<!-- 
  		#{creditPassword}, 
 -->
 		'0000',
		#{name}, 
		#{phoneNum}, 
		#{email}, 
		#{zipCode}, 
		#{address},
		#{addressDetail}, 
		#{rrn}, 
		0, 
		0)
	</insert>
	
	<!-- id 중복체크 -->
	<select id="idDuplicationCheck" parameterType="String" resultType="memberVO">
		select bank_id userId
		from test_customer
		where bank_id = #{userId}
	</select>
	
	<!-- human 중복체크 -->
	<select id="humanDuplicationCheck" parameterType="memberVO" resultType="memberVO">
		select name
		from test_customer
		where name = #{name} and rrn = #{rrn}
	</select>

	<!-- mail 중복체크 -->
	<select id="mailDuplicationCheck" parameterType="String" resultType="memberVO">
		select email
		from test_customer
		where email = #{email}
	</select>

	<!-- phone 중복체크 -->
	<select id="phoneDuplicationCheck" parameterType="String" resultType="memberVO">
		select phone_num phoneNum
		from test_customer
		where phone_num = #{phoneNum}
	</select>
	
</mapper>

<!--
CREATE TABLE TEST_CUSTOMER(
	CUSTOMER_ID NUMBER PRIMARY KEY
	, BANK_ID VARCHAR2(20) UNIQUE
	, PASSWORD VARCHAR2(256) 
	, CREDIT_PASSWORD VARCHAR2(256) 
	, NAME VARCHAR2(13) NOT NULL
	, PHONE_NUM VARCHAR2(13) NOT NULL UNIQUE
	, EMAIL VARCHAR2(30) NOT NULL
	, ZIP_CODE NUMBER(5) NOT NULL 
	, ADDRESS VARCHAR2(300) NOT NULL
	, ADDRESS_DETAIL VARCHAR2(300)
	, RRN VARCHAR2(13) NOT NULL UNIQUE
	, CUSTOMER_TYPE NUMBER(3) NOT NULL
	, AVAILABLE_BALANCE	NUMBER(15) NOT NULL
);
CREATE SEQUENCE test_customer_seq;
 -->