<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 추후구현
CREATE TABLE TEST_ACCOUNT(
	ACC_ID VARCHAR2(12) PRIMARY KEY
	, ACC_NUM	NUMBER NOT NULL UNIQUE
-->
<!-- 
CREATE TABLE TEST_ACCOUNT(
	ACC_NUM NUMBER PRIMARY KEY
	, ACC_NAME VARCHAR2(300) NOT NULL
	, PRODUCT_NUM NUMBER(2) NOT NULL
	, CUSTOMER_ID NUMBER(8) NOT NULL
	, CUSTOMER_NAME VARCHAR2(18) NOT NULL
	, INTEREST_RATE NUMBER(5,4) NOT NULL
	, BALANCE NUMBER(15) NOT NULL
	, REG_DATE DATE DEFAULT sysdate NOT NULL
	, RET_DATE DATE NOT NULL
	, LAST_TRADE_DATE DATE NOT NULL
	, CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY(CUSTOMER_ID) REFERENCES TEST_CUSTOMER(CUSTOMER_ID)
	, CONSTRAINT FK_PRODUCT_NUM FOREIGN KEY(PRODUCT_NUM) REFERENCES TEST_PRODUCT_LIST(PRODUCT_NUM)
	);
 -->
<mapper namespace="dao.AccountDAO">
	<!-- 계좌번호 기반  -->
	<select id="searchByAccNum" parameterType="Long" resultType="accountVO">
		<include refid="selectAstr"></include>
		<include refid="whereAccNum"></include>
	</select>
	
	<!-- 계좌 개설 -->
	<insert id="openAnAccount" parameterType="accountVO">
		insert into TEST_ACCOUNT
		values(#{accNum}, #{accName}, #{productNum},
		#{customerId}, #{customerName}, #{interestRate},
		#{balance}, #{regDate}, #{retDate}, sysdate
		<!-- 
		, #{accPwd}
		 -->
		)
	</insert>
	
	<!-- 고객의 계좌목록 조회 -->
	<select id="selectAccByCustomer" parameterType="int" resultType="accountVO">
		select acc_num accNum,acc_name accName,
		product_num productNum, balance,
		to_char(reg_date, 'yyyy-mm-dd') regDate,
		to_char(ret_date, 'yyyy-mm-dd') retDate,
		to_char(last_trade_date, 'yyyy-mm-dd') lastTradeDate
		from test_account
		where customer_id = #{customerId}
		order by lastTradeDate desc
	</select>
	
	<!-- 이체시 대상계좌 확인: 단일계좌 이름체크 -->
	<select id="getOwnerName" parameterType="Long" resultType="accountVO">
		select customer_name customerName
		<include refid="whereAccNum"></include>
	</select>
	
	<!-- 이체시 출금계좌 확인: 단일계좌 잔액조회 -->
	<select id="getBalance" parameterType="Long" resultType="accountVO">
		select afterBalance balance
		from 
		where accNum=#{accNum}
	</select>
	
	<!-- 입금 -->
	<update id="deposit" parameterType="transactionVO">
		update test_account
		set balance = balance+#{amount}
		where deposit_acc = #{depositAcc}
	</update>
	
	<!-- 출금 -->
	<update id="withdraw" parameterType="transactionVO">
		update test_account
		set balance = balance-#{amount}
		where deposit_acc = #{withdrawAcc}
	</update>
	
	<!-- 해지 -->
	<delete id="cloaseAnAccount" parameterType="accountVO">
		delete from test_account
		where acc_num = #{accNum}
	</delete>
	
	<!-- 1계좌조회 -->
	<select id="getAccount" parameterType="Long" resultType="accountVO">
		select acc_num accNum, acc_name accName, customer_Id customerId,
		product_num productNum, balance,
		to_char(reg_date, 'yyyy-mm-dd') regDate,
		to_char(ret_date, 'yyyy-mm-dd') retDate,
		to_char(last_trade_date, 'yyyy-mm-dd') lastTradeDate
		from test_account
		where acc_num = #{accNum}
	</select>
	
	<!-- ====================================== -->
	
	<!-- where accNum -->
	<sql id="whereAccNum">
		from test_account
		where acc_num=#{accNum}
	</sql>
	
	<!-- select * -->
	<sql id="selectAstr">
		select acc_num accnum, acc_name accName,
			product_num productNum, customer_id customerId,
			customer_name customerName,
			interest_rate interestRate, balance,
			to_char(reg_date, 'yyyy-mm-dd') regDate,
			to_char(ret_date, 'yyyy-mm-dd') retDate,
			to_char(last_trade_date, 'yyyy-mm-dd') lastTradeDate
	</sql>
</mapper>
